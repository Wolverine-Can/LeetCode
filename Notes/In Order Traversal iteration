//Recursion
public void inorderTraversal(TreeNode root) {
    if (root == null) {
        return;
    }
    inorderTraversal(root.left);
    System.out.println(node.val);
    inorderTraversal(root.right);
}

//Iteration
public void inorderTraversal(TreeNode root) {
    int ENTER = 1, EXIT = 2;
    Stack <Pair<TreeNode, Integer>> stack = new Stack<>();
    stack.push(new Pair(root, ENTER));
    while (!stack.isEmpty()) {
        Pair<TreeNode, Integer> p = stack.pop();
        TreeNode node = p.getKey();
        int state = p.getValue();
        if (node == null) {
            continue;
        }
        if (state == ENTER) {
            stack.push(new Pair(node.right, ENTER));
            stack.push(new Pair(node, EXIT));
            stack.push(new Pair(node.left, ENTER));
        } else{
            System.out.println(node.val);
        }
    }
    return res;
}
