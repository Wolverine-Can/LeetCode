/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> PQ = new PriorityQueue<>(new Comparator<ListNode>() {
            @Override
            public int compare(ListNode a, ListNode b) {
                return a.val - b.val;
            }
        });
        for (ListNode node : lists) {
            if (node != null)
                PQ.offer(node);
        }
        ListNode sentinel = new ListNode();
        ListNode last = sentinel;
        while (!PQ.isEmpty()) {
            ListNode node = PQ.poll();
            last.next = node;
            last = node;
            if (node.next != null)
                PQ.offer(node.next);
        }
        return sentinel.next;
    }
}
