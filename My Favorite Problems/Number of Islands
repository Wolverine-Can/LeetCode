public class UnionFind{
    int[] parent;
    int setNum;
    public UnionFind(int n) {
        parent = new int[n];
        Arrays.fill(parent, -1);
        setNum = n;
    }
    public int find(int x) {
        int head = x, px;
        while (parent[head] >= 0) {
            head = parent[head];
        }
        while (x != head) {
            px = parent[x];
            parent[x] = head;
            x = px;
        }
        return head;
    }
    public void union (int x, int y) {
        int hx = find(x);
        int hy = find(y);
        if (hx != hy) {
            parent[hx] = hy;
            setNum -= 1;
        }
    }
}

class Solution {
    private boolean inBound(char[][] grid, int m, int n) {
        int row = grid.length, col = grid[0].length;
        return m >= 0 && m < row && n >= 0 && n < col;
    }
    
    private int toIndex(int col, int m, int n) {
        return m * col + n;
    }
    
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int row = grid.length, col = grid[0].length;
        int waterNum = 0;
        for (int m = 0; m < row; m++) {
            for (int n = 0; n < col; n++) {
                if(grid[m][n] == '0') {
                    waterNum += 1;
                }
            }
        }
        UnionFind UF = new UnionFind(row * col);
        
        int[] dm = {0, 0, 1, -1};
        int[] dn = {1, -1, 0, 0};
        for (int m = 0; m < row; m++) {
            for (int n = 0; n < col; n++) {
                if (grid[m][n] == '0') {
                    continue;
                }
                for (int i = 0; i < 4; i++) {
                    int nm = m + dm[i];
                    int nn = n + dn[i];
                    if (inBound(grid, nm, nn) && grid[nm][nn] == '1') {
                        UF.union(toIndex(col, m, n), toIndex(col, nm, nn));
                    }
                }
            }
        }
        return UF.setNum - waterNum;
    }
}
