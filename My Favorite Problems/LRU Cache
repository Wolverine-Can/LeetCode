class LRUCache {
    private int size;
    private int capacity;
    private Map<Integer, Node> map;
    private Map<Node, Integer> NodeToKey;
    private Node sentinelFirst;
    private Node sentinelLast;
    
    private class Node {
        private int val;
        private Node prev;
        private Node next;
        private Node(int val) {
            this.val = val;
        }
    }
    
    private void addToFirst(Node n) {
        sentinelFirst.next.prev = n;
        n.next = sentinelFirst.next;
        sentinelFirst.next = n;
        n.prev = sentinelFirst;
    }
    
    private void removeNode(Node n) {
        n.prev.next = n.next;
        n.next.prev = n.prev;
    }
    
    public LRUCache(int capacity) {
        this.size = 0;
        this.capacity = capacity;
        this.map = new HashMap<>();
        this.NodeToKey = new HashMap<>();
        sentinelFirst = new Node(-1);
        sentinelLast = new Node(-1);
        sentinelFirst.next = sentinelLast;
        sentinelLast.prev = sentinelFirst;
    }
    
    public int get(int key) {
        if (!map.containsKey(key))
            return -1;
        Node n = map.get(key);
        removeNode(n);
        addToFirst(n);
        return n.val;
    }
    
    public void put(int key, int value) {
        if (map.containsKey(key)) {
            Node n = map.get(key);
            n.val = value;
            removeNode(n);
            addToFirst(n);
        } else {
            Node n = new Node(value);
            addToFirst(n);
            map.put(key, n);
            NodeToKey.put(n, key);
            if (size == capacity) {
                Node toRemove = sentinelLast.prev;
                map.remove(NodeToKey.get(toRemove));
                NodeToKey.remove(toRemove);
                removeNode(toRemove);
                return;
            }
            size += 1;
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
