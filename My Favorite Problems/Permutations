class Solution {
    private void dfs(int[] nums, boolean[] visited, List<Integer> pre, List<List<Integer>> res) {
        if (pre.size() == nums.length) {
            res.add(new LinkedList(pre));
            return;
        } 
        
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                visited[i] = true;
                pre.add(nums[i]);
                dfs(nums, visited, pre, res);
                visited[i] = false;
                pre.remove(pre.size() - 1);
            }
        }
    }
    
    
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new LinkedList<>();
        boolean[] visited = new boolean[nums.length];
        dfs(nums, visited, new LinkedList<Integer>(), res);
        return res;
    }
}
