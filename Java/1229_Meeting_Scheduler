class Solution {
    public class Event{
        public int time;
        public int eventFlag;
        public Event(int time, int eventFlag) {
            this.time = time;
            this.eventFlag = eventFlag;
        }
    }
    
    public List<Integer> minAvailableDuration(int[][] slots1, int[][] slots2, int duration) {
        int START = 0, END = 1;
        Event[] events = new Event[2 * slots1.length + 2 * slots2.length];
        int index = 0;
        for (int[] slot : slots1) {
            events[index++] = new Event(slot[0], START);
            events[index++] = new Event(slot[1], END);
        }
        for (int[] slot : slots2) {
            events[index++] = new Event(slot[0], START);
            events[index++] = new Event(slot[1], END);
        }
        Arrays.sort(events, (a, b) -> {
            return a.time - b.time;
        });
        
        int availCount = 0, startTime = 0;
        List<Integer> ans = new ArrayList<>();
        for (Event event : events) {
            if (event.eventFlag == START) {
                availCount += 1;
                if (availCount == 2) {
                    startTime = event.time;
                }
            } else {
                availCount -= 1;
                if (availCount == 1 && event.time - startTime >= duration) {
                    ans.add(startTime);
                    ans.add(startTime + duration);
                    break;
                }
            }
        }
        return ans;
    }
}
