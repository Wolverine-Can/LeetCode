/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        Node leftMost = root;
        while(leftMost != null) {
            Node pre = null;
            Node node = leftMost;
            Node nextLeftMost = null;
            while(node != null) {
                if(node.left != null) {
                    if(pre != null) {
                        pre.next = node.left;
                    }
                    pre = node.left;
                }
                if (node.right != null) {
                    if(pre != null) {
                        pre.next = node.right;
                    }
                    pre = node.right;
                }
                if(nextLeftMost == null) {
                    nextLeftMost = node.left == null ? node.right : node.left;
                }
                node = node.next;
            }
            leftMost = nextLeftMost;
        }
        return root;
    }
}
