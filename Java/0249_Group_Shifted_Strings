class Solution {
    private boolean isShifted(String a, String b) {
        int shift = a.charAt(0) - b.charAt(0);
        for (int i = 1; i < a.length(); i++) {
            if (a.charAt(i) - b.charAt(i) != shift && a.charAt(i) - b.charAt(i) + 26 != shift && a.charAt(i) - b.charAt(i) - 26 != shift) {
                return false;
            }
        }
        return true;
    }
    
    public List<List<String>> groupStrings(String[] strings) {
        List<List<String>> ans = new ArrayList<>();
        Map<Integer, List<List<String>>> map = new HashMap<>();
        for (String s : strings) {
            int length = s.length();
            if (!map.containsKey(length)) {
                map.put(length, new ArrayList<>());
            }
            boolean canGroup = false;
            for (List<String> lst : map.get(length)) {
                if (isShifted(s, lst.get(0))) {
                    canGroup = true;
                    lst.add(s);
                }
            }
            if(!canGroup) {
                map.get(length).add(new ArrayList<>(){{
                    add(s);
                }});
            }
        }
        for (List<List<String>> lst : map.values()) {
            ans.addAll(lst);
        }
        return ans;
    }
}
