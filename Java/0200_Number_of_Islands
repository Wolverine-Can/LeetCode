// bfs
class Solution {
    
    class Coordinate {
        int x, y;
        public Coordinate(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    
    private boolean inBound(Coordinate c, char[][] grid) {
        if (c.x >= 0 && c.x < grid.length && c.y >= 0 && c.y < grid[0].length) {
            return true;
        }
        return false;
    }
    
    private LinkedList<Coordinate> neighbor(Coordinate c, char[][] grid) {
        LinkedList<Coordinate> neighbors = new LinkedList<>();
        int[] deltaX = new int[] {0, 0, 1, -1};
        int[] deltaY = new int[] {1, -1, 0, 0};
        for (int i = 0; i < 4; i++) {
            Coordinate adj = new Coordinate(c.x + deltaX[i], c.y + deltaY[i]);
            if (inBound(adj, grid)) {
                neighbors.offer(adj);
            }
        }
        return neighbors;
    }
    
    private void markByBFS(char[][] grid, boolean[][] marked, int i, int j) {
        Queue<Coordinate> queue = new LinkedList<>();
        queue.offer(new Coordinate(i, j));
        marked[i][j] = true;
        while (!queue.isEmpty()) {
            for (Coordinate c : neighbor(queue.poll(), grid)) {
                if (grid[c.x][c.y] =='1' && !marked[c.x][c.y]) {
                    marked[c.x][c.y] = true;
                    queue.offer(c);
                }
            }
        }
    }
    
    public int numIslands(char[][] grid) {
        if (grid.length < 1 || grid[0].length < 1) return 0;
        int NofIslands = 0;
        boolean[][] marked = new boolean[grid.length][grid[0].length];
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1' && !marked[i][j]) {
                    markByBFS(grid, marked, i, j);
                    NofIslands++;
                }
            }
        }
        return NofIslands;
    }
}
