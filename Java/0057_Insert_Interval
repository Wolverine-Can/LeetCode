class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        if (intervals.length == 0) {
            return new int[][]{newInterval};
        }
        List<int[]> res = new ArrayList<>();
        Stack<Integer> stack = new Stack<>();
        boolean start = false, end = false;
        for(int i = 0; i < intervals.length * 2; i++) {
            if (!start) {
                if (intervals[i / 2][i % 2] >= newInterval[0]) {
                    stack.push(newInterval[0]);
                    start = true;
                }
            }
            if (!end) {
                if (intervals[i / 2][i % 2] > newInterval[1]) {
                    int left = stack.pop();
                    if (stack.isEmpty()) {
                        res.add(new int[]{left, newInterval[1]});
                    }
                    end = true;
                }
            }
            
            if (i % 2 == 0) {
                stack.push(intervals[i / 2][0]);
            } else {
                int left = stack.pop();
                if (stack.isEmpty()) {
                    res.add(new int[]{left, intervals[i / 2][1]});
                }
            }
        }
        if (newInterval[0] > intervals[intervals.length - 1][1]) {
            res.add(newInterval);
        } else if (newInterval[1] >= intervals[intervals.length - 1][1]){
            res.add(new int[]{stack.pop(), newInterval[1]});
        }
        return res.toArray(new int[res.size()][]);
    }
}
