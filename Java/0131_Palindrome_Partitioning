class Solution {
    private boolean isPalindrome(String s, int startIndex, int endIndex) {
        while (startIndex < endIndex) {
            if (s.charAt(startIndex++) != s.charAt(endIndex--)) {
                return false;
            }
        }
        return true;
    }
    
    private void partitionString(String s, int startIndex, List<String> pre, List<List<String>> res) {
        if (startIndex == s.length()) {
            res.add(new ArrayList<>(pre));
        }
        for (int i = startIndex; i < s.length(); i++) {
            if (isPalindrome(s, startIndex, i)) {
                pre.add(s.substring(startIndex, i + 1));
                partitionString(s, i + 1, pre, res);
                pre.remove(pre.size() - 1);
            }
        }
    }
    
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        partitionString(s, 0, new ArrayList<String>(), res);
        return res;
    }
}
