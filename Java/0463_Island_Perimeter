class Solution {
    private boolean inBound(int[][] grid, int i, int j) {
        int row = grid.length, col = grid[0].length;
        return i >= 0 && i < row && j >= 0 && j < col;
    }
    
    public int islandPerimeter(int[][] grid) {
        int row = grid.length, col = grid[0].length;
        int ans = 0;
        int[] dm = {0, 0, 1, -1};
        int[] dn = {1, -1, 0, 0};
        for (int m = 0; m < row; m++) {
            for(int n = 0; n < col; n++) {
                if (grid[m][n] == 1) {
                    int peri = 4;
                    for (int i = 0; i < 4; i++) {
                        int nm = m + dm[i];
                        int nn = n + dn[i];
                        if (inBound(grid, nm, nn) && grid[nm][nn] == 1) {
                            peri -= 1;
                        }
                    }
                    ans += peri;
                }
            }
        }
        return ans;
    }
}
