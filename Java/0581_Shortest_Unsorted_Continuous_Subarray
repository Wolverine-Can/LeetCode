class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int firstTurnIndex = 0, lastTurnIndex = nums.length - 1;
        while (firstTurnIndex + 1 < nums.length && nums[firstTurnIndex] <= nums[firstTurnIndex + 1]) {
            firstTurnIndex += 1;
        }
        while (lastTurnIndex - 1 >= 0 && nums[lastTurnIndex - 1] <= nums[lastTurnIndex]) {
            lastTurnIndex -= 1;
        }
        
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        for (int i = firstTurnIndex; i <= lastTurnIndex; i++) {
            min = Math.min(min, nums[i]);
            max = Math.max(max, nums[i]);
        }
        
        int startIndex = firstTurnIndex, endIndex = lastTurnIndex;
        while (startIndex > 0 && nums[startIndex - 1] > min) {
            startIndex -= 1;
        }
        while (endIndex < nums.length - 1 && nums[endIndex + 1] < max) {
            endIndex += 1;
        }
        return endIndex <= startIndex ? 0 : endIndex - startIndex + 1;
    }
}
