class Solution {
    private int dp (String text1, String text2, int[][] memo, int i, int j) {
        if (i == -1 || j == -1) {
            return 0;
        }
        if (memo[i][j] != -1) {
            return memo[i][j];
        }
        int ans = 0;
        if (text1.charAt(i) == text2.charAt(j)) {
            ans = dp (text1, text2, memo, i - 1, j - 1) + 1;
        } else {
            ans = Math.max(dp (text1, text2, memo, i, j - 1), dp (text1, text2, memo, i - 1, j));
        }
        memo[i][j] = ans;
        return ans;
    }
    
    public int longestCommonSubsequence(String text1, String text2) {
        int[][] memo = new int[text1.length()][text2.length()];
        for (int[] row : memo) {
            Arrays.fill(row, -1);
        }
        return dp (text1, text2, memo, text1.length() - 1, text2.length() - 1);
    }
}
