/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        HashMap<Node, Integer> NodeId = new HashMap<>();
        int id = 0;
        Node node = head;
        List<Node> list = new ArrayList<>();
        while (node != null ) {
            Node next = new Node(node.val);
            if (!list.isEmpty()) {
                list.get(list.size() - 1).next = next;
            }
            list.add(next);
            NodeId.put(node, id);
            node = node.next;
            id += 1;
        }
        node = head;
        for (int i = 0; i < list.size(); i++) {
            Node n = list.get(i);
            if (node.random != null) {
                n.random = list.get(NodeId.get(node.random));
            }
            node = node.next;
        }
        return list.get(0);
    }
}
