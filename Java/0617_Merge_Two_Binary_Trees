class Solution {
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        if (t1 == null) {
            return t2;
        }
        if (t2 == null) {
            return t1;
        }
        TreeNode root = new TreeNode(t1.val + t2.val);
        root.left = mergeTrees(t1.left, t2.left);
        root.right = mergeTrees(t1.right, t2.right);
        return root;
    }
}


class Solution {
    private void rePoint(TreeNode node, Map<TreeNode, TreeNode> parent, TreeNode target) {
        TreeNode p = parent.get(node);
        if (p.left == node) {
            p.left = target;
        } else {
            p.right = target;
        }
    }
    
    public TreeNode mergeTrees(TreeNode tree1, TreeNode tree2) {
        Stack<Pair<TreeNode, TreeNode>> stack = new Stack<>();
        Stack<TreeNode> ans = new Stack<>();
        stack.push(new Pair(tree1, tree2));
        Map<TreeNode, TreeNode> parent = new HashMap<>();
        TreeNode sentinel = new TreeNode();
        TreeNode root = new TreeNode();
        sentinel.right = root;
        parent.put(root, sentinel);
        ans.push(root);
        while (!stack.isEmpty()) {
            Pair<TreeNode, TreeNode> treePair = stack.pop();
            TreeNode node = ans.pop();
            TreeNode t1 = treePair.getKey();
            TreeNode t2 = treePair.getValue();
            
            if (t1 == null) {
                rePoint(node, parent, t2);
                continue;
            }
            if (t2 == null) {
                rePoint(node, parent, t1);
                continue;
            }
            node.val = t1.val + t2.val;
            node.left = new TreeNode();
            node.right = new TreeNode();
            parent.put(node.left, node);
            parent.put(node.right, node);
            ans.push(node.left);
            ans.push(node.right);
            stack.push(new Pair(t1.left, t2.left));
            stack.push(new Pair(t1.right, t2.right));
        }
        return sentinel.right;
    }
}
