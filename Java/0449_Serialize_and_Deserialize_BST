/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    // Encodes a tree to a single string.
    private void inorder(TreeNode node, StringBuilder sb) {
        if(node == null) {
            return;
        }
        sb.append(node.val);
        sb.append(",");
        inorder(node.left, sb);
        inorder(node.right, sb);
    }
    
    public String serialize(TreeNode root) {
        if(root == null) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        inorder(root, sb);
        sb.deleteCharAt(sb.length() - 1);
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    private List<Integer> getInorderList(String data) {
        List<Integer> res = new ArrayList<>();
        if(data.length() == 0) {
            return res;
        }
        int start = 0, index = 0;
        while(index < data.length()) {
            if(data.charAt(index) == ',') {
                res.add(Integer.parseInt(data.substring(start, index)));
                start = index + 1;
            }
            index += 1;
        }
        res.add(Integer.parseInt(data.substring(start, index)));
        return res;
    }
    
    private TreeNode helper(List<Integer> lst, int leftIndex, int rightIndex) {
        if(leftIndex > rightIndex) {
            return null;
        }
        TreeNode root = new TreeNode(lst.get(leftIndex));
        int index = leftIndex + 1;
        while(index <= rightIndex && lst.get(index) < root.val) {
            index += 1;
        }
        root.left = helper(lst, leftIndex + 1, index - 1);
        root.right = helper(lst, index, rightIndex);
        return root;
    }
    
    public TreeNode deserialize(String data) {
        List<Integer> lst = getInorderList(data);
        return helper(lst, 0, lst.size() - 1);
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// String tree = ser.serialize(root);
// TreeNode ans = deser.deserialize(tree);
// return ans;
