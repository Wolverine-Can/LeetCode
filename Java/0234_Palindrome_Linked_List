/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    private ListNode reverse(ListNode head) {
        ListNode pre = null, curr = head;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = pre;
            pre = curr;
            curr = next;
        }
        return pre;
    }
    
    public boolean isPalindrome(ListNode head) {
        ListNode node = head;
        int listLength = 0;
        while (node != null) {
            node = node.next;
            listLength += 1;
        }
        int halfLength = listLength / 2;
        boolean lengthIsOdd = listLength % 2 == 1;
        
        ListNode secondHead = head;
        for (int i = 0; i < halfLength; i++) {
            secondHead = secondHead.next;
        }
        secondHead = lengthIsOdd ? secondHead.next: secondHead;
        
        ListNode tail = reverse(secondHead);
        
        for (int i = 0; i < halfLength; i++) {
            if (head.val != tail.val) {
                return false;
            }
            head = head.next;
            tail = tail.next;
        }
        return true;
    }
}
