class Solution {
    
    private void dfs(int[] candidates, int index, int target, List<Integer> preItems, List<List<Integer>> ans) {
        if (target == 0) {
            ans.add(preItems);
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            if (candidates[i] <= target) {
                List<Integer> currItems = new ArrayList<>();
                currItems.addAll(preItems);
                currItems.add(candidates[i]);
                dfs(candidates, i, target - candidates[i], currItems, ans);
            } else {
                break;
            }
        }
    }
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> preItems = new ArrayList<>();
        dfs (candidates, 0, target, preItems, ans);
        return ans;
    }
}
