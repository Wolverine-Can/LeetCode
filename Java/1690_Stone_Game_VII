class Solution {
    private int dp(int startIndex, int endIndex, int[] stones, Integer[][] memo, int sum) {
        if (memo[startIndex][endIndex] != null) {
            return memo[startIndex][endIndex];
        }
        int diff1 = sum - stones[startIndex] - dp(startIndex + 1, endIndex, stones, memo, sum - stones[startIndex]);
        int diff2 = sum - stones[endIndex] - dp(startIndex, endIndex - 1, stones, memo, sum - stones[endIndex]);
        memo[startIndex][endIndex] = Math.max(diff1, diff2);
        return memo[startIndex][endIndex];
    }
    
    public int stoneGameVII(int[] stones) {
        int n = stones.length;
        int sum = 0;
        Integer[][] memo = new Integer[n][n];
        for (int i = 0; i < n; i++) {
            sum += stones[i];
            memo[i][i] = 0;
        }
        return dp(0, n - 1, stones, memo, sum);
    }
}
