/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private TreeNode buildTreeHelper(int[] preorder, int pLeft, int pRight,int[] inorder, int iLeft, int iRight) {
        if (pLeft > pRight || pLeft < 0 || pRight >= preorder.length) {
            return null;
        }
        
        TreeNode root = new TreeNode(preorder[pLeft]);
        int rootIndex = iLeft;
        while (inorder[rootIndex] != root.val) {
            rootIndex += 1;
        }
        int leftCount = rootIndex - iLeft;
        root.left = buildTreeHelper(preorder, pLeft + 1, pLeft + leftCount, inorder, iLeft, rootIndex - 1);
        root.right = buildTreeHelper(preorder, pLeft + 1 + leftCount, pRight, inorder, rootIndex + 1, iRight);
        return root;
    }
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int N = preorder.length;
        return buildTreeHelper(preorder, 0, N - 1, inorder, 0, N - 1);
    }
}
