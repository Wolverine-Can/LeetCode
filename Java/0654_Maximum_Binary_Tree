// stack solution
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        Stack<TreeNode> stack = new Stack<>();
        for (int i = 0; i < nums.length; i++) {
            if (stack.isEmpty() || stack.peek().val > nums[i]) {
                stack.push(new TreeNode(nums[i]));
            } else {
                TreeNode son = stack.pop();
                TreeNode parent;
                while (!stack.isEmpty() && stack.peek().val < nums[i]) {
                    parent = stack.pop();
                    parent.right = son;
                    son = parent;
                }
                parent = new TreeNode(nums[i]);
                parent.left = son;
                stack.push(parent);
            }
        }
        TreeNode root = stack.pop();
        while (!stack.isEmpty()) {
            TreeNode son = stack.pop();
            son.right = root;
            root = son;
        }
        return root;
    }
}
