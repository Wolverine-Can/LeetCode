/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private void pathSumHelper(TreeNode root, int sum, List<Integer> pre, List<List<Integer>> ans) {
        if (root == null) {
            return;
        }
        sum -= root.val;
        pre.add(root.val);
        if (sum == 0 && root.left == null && root.right == null) {
            List<Integer> lst = new ArrayList<>();
            lst.addAll(pre);
            pre.remove(pre.size() - 1);
            ans.add(lst);
            return;
        }
        pathSumHelper(root.left, sum, pre, ans);
        pathSumHelper(root.right, sum, pre, ans);
        sum += root.val;
        pre.remove(pre.size() - 1);
    }
    
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> ans = new ArrayList<>();
        pathSumHelper(root, sum, new ArrayList<Integer>(), ans);
        return ans;
    }
}
