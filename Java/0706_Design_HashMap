class Pair<U, V> {
    public U key;
    public V val;
    public Pair(U key, V val) {
        this.key = key;
        this.val = val;
    }
}

class MyHashMap {
    private ArrayList<ArrayList<Pair<Integer, Integer>>> map;
    private int size = 1000;
    /** Initialize your data structure here. */
    public MyHashMap() {
        map = new ArrayList<ArrayList<Pair<Integer, Integer>>>(size);
        for (int i = 0; i < size; i++) {
            map.add(new ArrayList<Pair<Integer, Integer>>());
        }
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        List<Pair<Integer, Integer>> bucket = map.get(key % size);
        for (Pair<Integer, Integer> p : bucket) {
            if (p.key == key) {
                p.val = value;
                return;
            }
        }
        bucket.add(new Pair(key, value));
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        List<Pair<Integer, Integer>> bucket = map.get(key % size);
        for (Pair<Integer, Integer> p : bucket) {
            if (p.key == key) {
                return p.val;
            }
        }
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        List<Pair<Integer, Integer>> bucket = map.get(key % size);
        for (Pair<Integer, Integer> p : bucket) {
            if (p.key == key) {
                bucket.remove(p);
                return;
            }
        }
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
