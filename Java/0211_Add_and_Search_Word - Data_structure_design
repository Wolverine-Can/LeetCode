class WordDictionary {
    private TrieNode root;
    private class TrieNode {
        private TrieNode[] sons;
        private boolean isWord;
        private TrieNode() {
            sons = new TrieNode[26];
            Arrays.fill(sons, null);
            isWord = false;
        }
    }
    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode node = root;
        char[] chs = word.toCharArray();
        for (int i = 0; i < chs.length; i++) {
            char c = chs[i];
            if (node.sons[c - 'a'] == null) {
                node.sons[c - 'a'] = new TrieNode();
            }
            node = node.sons[c - 'a'];
        }
        node.isWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    private boolean searchHelper(String word, TrieNode node) {
        char[] chs = word.toCharArray();
        for (int i = 0; i < chs.length; i++) {
            char c = chs[i];
            if (c == '.') {
                for (int j = 0; j < 26; j++) {
                    if (node.sons[j] != null && searchHelper(word.substring(i + 1), node.sons[j])) {
                        return true;
                    }
                }
                return false;
            } else if (node.sons[c - 'a'] == null) {
                return false;
            }
            node = node.sons[c - 'a'];
        }
        return node.isWord;
    }
    
    public boolean search(String word) {
        return searchHelper(word, root);
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
