class Trie {
    TrieNode root;
    Map<Character, Integer> map;
    
    Trie() {
        root = new TrieNode();
        map = new HashMap<>();
        for (int i = 0; i < 26; i++) {
            char c1 = (char)('a' + i);
            char c2 = (char)('A' + i);
            map.put(c1, i);
            map.put(c2, i + 26);
        }
    }
    
    class TrieNode {
        TrieNode[] sons;
        boolean isWord;
        TrieNode() {
            sons = new TrieNode[52];
            isWord = false;
        }
    }
    
    public void addWord(String word) {
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (node.sons[map.get(c)] == null) {
                node.sons[map.get(c)] = new TrieNode();
            }
            node = node.sons[map.get(c)];
        }
        node.isWord = true;
    }
    
    public boolean search(String word, TrieNode node) {
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (c == '.') {
                for (int j = 0; j < 52; j++) {
                    if (node.sons[j] != null && search(word.substring(i + 1), node.sons[j])) {
                        return true;
                    }
                }
                return false;
            } else if (node.sons[map.get(c)] == null) {
                return false;
            }
            node = node.sons[map.get(c)];
        }
        return node.isWord;
    }
}


class WordDictionary {
    Trie trie;
    /** Initialize your data structure here. */
    public WordDictionary() {
        trie = new Trie();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        trie.addWord(word);
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return trie.search(word, trie.root);
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
