class Solution {
    private class UnionFind{
        private int[] parent;
        private UnionFind(int n) {
            parent = new int[n];
            Arrays.fill(parent, -1);
        }
        private int find(int x) {
            int head = x, px;
            while(parent[head] != -1) {
                head = parent[head];
            }
            while (x != head) {
                px = parent[x];
                parent[x] = head;
                x = px;
            }
            return head;
        }
        private void connect(int x, int y) {
            int hx = find(x);
            int hy = find(y);
            if (hx != hy) {
                parent[hx] = hy;
            }
        }
        private boolean isConnected(int x, int y) {
            return find(x) == find(y);
        }
    }
    
    private int toID(char[][] board, int m, int n) {
        int col = board[0].length;
        return m * col + n + 1;
    }
    
    private boolean onBorder(char[][] board, int m, int n) {
        int row = board.length, col = board[0].length;
        return m == 0 || m == row - 1 || n == 0 || n == col - 1;
    }
    
    private boolean inBound(char[][] board, int m, int n) {
        int row = board.length, col = board[0].length;
        return m >= 0 && m < row && n >= 0 && n < col;
    }
    
    public void solve(char[][] board) {
        if (board == null || board.length == 0 || board[0].length == 0) {
            return;
        }
        int row = board.length, col = board[0].length;
        UnionFind UF = new UnionFind(row * col + 1);
        
        int[] dm = {0, -1};
        int[] dn = {-1, 0};
        for (int m = 0; m < row; m++) {
            for (int n = 0; n < col; n++) {
                if (board[m][n] == 'X') {
                    continue;
                }
                int id = toID(board, m, n);
                if (onBorder(board, m, n)) {
                    UF.connect(0, id);
                }
                for (int i = 0; i < 2; i++) {
                    int nm = m + dm[i];
                    int nn = n + dn[i];
                    if (inBound(board, nm, nn) && board[nm][nn] == 'O') {
                        UF.connect(id, toID(board, nm, nn));
                    }
                }
            }
        }
        for (int m = 0; m < row; m++) {
            for (int n = 0; n < col; n++) {
                if(board[m][n] == 'O' && !UF.isConnected(0, toID(board, m, n))) {
                    board[m][n] = 'X';
                }
            }
        }
    }
}
