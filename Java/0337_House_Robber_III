/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int robWithRoot(TreeNode root, Map<TreeNode, Integer> memo1, Map<TreeNode, Integer> memo2) {
        if (root == null) {
            return 0;
        }
        if (memo1.containsKey(root)) {
            return memo1.get(root);
        }
        int ans = root.val + robWithoutRoot(root.left, memo1, memo2) + robWithoutRoot(root.right, memo1, memo2);
        memo1.put(root, ans);
        return ans;
    }
    
    private int robWithoutRoot(TreeNode root, Map<TreeNode, Integer> memo1, Map<TreeNode, Integer> memo2) {
        if (root == null) {
            return 0;
        }
        if (memo2.containsKey(root)) {
            return memo2.get(root);
        }
        int ans = Math.max(robWithRoot(root.left, memo1, memo2), robWithoutRoot(root.left, memo1, memo2)) + Math.max(robWithRoot(root.right, memo1, memo2), robWithoutRoot(root.right, memo1, memo2));
        memo2.put(root, ans);
        return ans;
    }
    
    public int rob(TreeNode root) {
        Map<TreeNode, Integer> memo1 = new HashMap<>();
        Map<TreeNode, Integer> memo2 = new HashMap<>();
        return Math.max(robWithRoot(root, memo1, memo2), robWithoutRoot(root, memo1, memo2));
    }
}
