class Solution {
    private TrieNode root;
    private class TrieNode{
        TrieNode[] sons;
        boolean isWord;
        String word;
        private TrieNode() {
            sons = new TrieNode[26];
            Arrays.fill(sons, null);
            isWord = false;
        }
    }

    public void insert(String word) {
        TrieNode node = root;
        char[] chs = word.toCharArray();
        for (int i = 0; i < chs.length; i++) {
            char c = chs[i];
            if (node.sons[c - 'a'] == null) {
                node.sons[c - 'a'] = new TrieNode();
            }
            node = node.sons[c - 'a'];
        }
        node.isWord = true;
        node.word = word;
    }
    
    private boolean inBound(char[][] board, int m, int n) {
        int row = board.length, col = board[0].length;
        return m >= 0 && m < row && n >= 0 && n < col;
    }
    
    private void search(char[][] board, boolean[][] visited,int m, int n, TrieNode node, Set<String> ans) {
        int row = board.length, col = board[0].length;
        int[] dm = new int[] {0, 0, 1, -1};
        int[] dn = new int[] {1, -1, 0, 0};
        if (node.isWord) {
            ans.add(node.word);
        }
        visited[m][n] = true;
        for (int i = 0; i < 4; i++) {
            int neiborM = m + dm[i];
            int neiborN = n + dn[i];
            if (inBound(board, neiborM, neiborN) && !visited[neiborM][neiborN]
                && node.sons[board[neiborM][neiborN] - 'a'] != null) {
                search(board, visited, neiborM, neiborN, node.sons[board[neiborM][neiborN] - 'a'], ans);
            }
        }
        visited[m][n] = false;
    }
    
    public List<String> findWords(char[][] board, String[] words) {
        int row = board.length, col = board[0].length;
        if (row == 0 || col == 0 || words.length == 0) {
            return new ArrayList<>();
        }
        Set<String> ans = new HashSet<>();
        root = new TrieNode();
        for (String word : words) {
            insert(word);
        }
        for (int m = 0; m < row; m++) {
            for (int n = 0; n < col; n++) {
                if (root.sons[board[m][n] - 'a'] != null) {
                    search(board, new boolean[row][col], m, n, root.sons[board[m][n] - 'a'], ans);
                }
            }
        }
        return new ArrayList<>(ans);
    }
}
