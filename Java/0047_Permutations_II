class Solution {
    private void dfs(int[] nums, boolean[] visited, List<Integer> pre, List<List<Integer>> res) {
        if (pre.size() == nums.length) {
            res.add(new ArrayList<Integer>(pre));
            return;
        }
        for(int i = 0; i < nums.length; i++) {
            if(visited[i]) {
                continue;
            }
            int num = nums[i];
            pre.add(num);
            visited[i] = true;
            dfs(nums, visited, pre, res);
            visited[i] = false;
            pre.remove(pre.size() - 1);
            while(i < nums.length - 1 && nums[i] == nums[i + 1]) {
                i += 1;
            }
        }
    }
    
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        boolean[] visited = new boolean[nums.length];
        List<Integer> pre = new ArrayList<>();
        List<List<Integer>> res = new ArrayList<>();
        dfs(nums, visited, pre, res);
        return res;
    }
}
