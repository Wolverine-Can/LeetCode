/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val,Node _left,Node _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/

class Solution {
    private Pair<Node, Node> helper(Node root) {
        if (root == null) {
            return null;
        }
        Node head = root, tail = root;
        Pair<Node, Node> leftHeadAndTail = helper(root.left);
        Pair<Node, Node> rightHeadAndTail = helper(root.right);
        if (leftHeadAndTail != null) {
            Node leftHead = leftHeadAndTail.getKey();
            Node leftTail = leftHeadAndTail.getValue();
            head = leftHead;
            leftTail.right = root;
            root.left = leftTail;
        }
        if (rightHeadAndTail != null) {
            Node rightHead = rightHeadAndTail.getKey();
            Node rightTail = rightHeadAndTail.getValue();
            tail = rightTail;
            rightHead.left = root;
            root.right = rightHead;
        }
        head.left = tail;
        tail.right = head;
        return new Pair(head, tail);
    }
    
    
    public Node treeToDoublyList(Node root) {
        Pair<Node, Node> headAndTail = helper(root);
        return headAndTail == null ? null : headAndTail.getKey();
    }
}
