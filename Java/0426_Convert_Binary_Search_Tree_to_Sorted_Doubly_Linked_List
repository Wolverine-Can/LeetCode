/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val,Node _left,Node _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/

class Solution {
    private void inOrder (Node root, List<Node> nodes) {
        if (root == null) {
            return;
        }
        inOrder(root.left, nodes);
        nodes.add(root);
        inOrder(root.right, nodes);
    }
    
    public Node treeToDoublyList(Node root) {
        if (root == null) {
            return null;
        }
        List<Node> nodes = new ArrayList<>();
        inOrder(root, nodes);
        for (int i = 0; i < nodes.size(); i++) {
            Node first = nodes.get(i);
            Node second = nodes.get((i + 1) % nodes.size());
            first.right = second;
            second.left = first;
        }
        return nodes.get(0);
    }
}
