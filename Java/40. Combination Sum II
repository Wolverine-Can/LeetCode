class Solution {
    private void dfs(int[] candidates, int target, int curSum, int index, List<Integer> pre, List<List<Integer>> res) {
        if(curSum > target) {
            return;
        }
        if(curSum == target) {
            res.add(new ArrayList<>(pre));
            return;
        }
        for(int i = index; i < candidates.length; i++) {
            int num = candidates[i];
            pre.add(num);
            curSum += num;
            dfs(candidates, target, curSum, i + 1, pre, res);
            while(i < candidates.length - 1 && candidates[i] == candidates[i + 1]) {
                i += 1;
            }
            curSum -= num;
            pre.remove(pre.size() - 1);
        }
    }
    
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> pre = new ArrayList<>();
        dfs(candidates, target, 0, 0, pre, res);
        return res;
    }
}
