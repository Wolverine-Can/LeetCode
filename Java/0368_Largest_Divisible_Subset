class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        if(nums == null || nums.length == 0) {
            return new ArrayList<>();
        }
        int[] dp = new int[nums.length];
        int[] lastIndex = new int[nums.length];
        Arrays.fill(lastIndex, -1);
        Arrays.sort(nums);
        int maxSetIndex = 0;
        for (int i = 0; i < nums.length; i++) {
            int maxCount = 0;
            for (int j = i - 1; j >= 0; j--) {
                if (nums[i] % nums[j] == 0 && dp[j] > maxCount) {
                    maxCount = dp[j];
                    lastIndex[i] = j;
                }
            }
            dp[i] = maxCount + 1;
            maxSetIndex = dp[maxSetIndex] > dp[i] ? maxSetIndex : i;
        }
        List<Integer> res = new ArrayList<>();
        int index = maxSetIndex;
        while (index != -1) {
            res.add(0, nums[index]);
            index = lastIndex[index];
        }
        return res;
    }
}
