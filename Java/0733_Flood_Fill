class Solution {
    private boolean inBound(int[][] image, int m, int n) {
        int row = image.length, col = image[0].length;
        return m >= 0 && m < row && n >= 0 && n < col;
    }
    
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        int row = image.length, col = image[0].length;
        boolean[][] marked = new boolean[row][col];
        Queue<Pair<Integer, Integer>> queue =  new LinkedList<>();
        queue.offer(new Pair(sr, sc));
        int[] dm = {0, 0, 1, -1};
        int[] dn = {1, -1, 0, 0};
        while (!queue.isEmpty()) {
            Pair<Integer, Integer> p = queue.poll();
            int m = p.getKey(), n = p.getValue();
            for (int i = 0; i < 4; i++) {
                int nm = m + dm[i];
                int nn = n + dn[i];
                if (inBound(image, nm, nn) && image[m][n] == image[nm][nn] && !marked[nm][nn]) {
                    queue.offer(new Pair(nm, nn));
                    marked[nm][nn] = true;
                }
            }
            image[m][n] = newColor;
        }
        return image;
    }
}
