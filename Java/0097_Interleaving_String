class Solution {
    private boolean dp(String s1, int i1, String s2, int i2, String s3, int i3, Boolean[][][] memo) {
        if (memo[i1][i2][i3] != null) {
            return memo[i1][i2][i3];
        }
        if (i3 == s3.length()) {
            return false;
        }
        char c = s3.charAt(i3);
        if (!(i1 < s1.length() && s1.charAt(i1) == c || i2 < s2.length() && s2.charAt(i2) == c)) {
            memo[i1][i2][i3] = false;
        }
        if (i1 < s1.length() && s1.charAt(i1) == c) {
            memo[i1][i2][i3] = dp(s1, i1 + 1, s2, i2, s3, i3 + 1, memo);
        }
        if (i2 < s2.length() && s2.charAt(i2) == c) {
            boolean next = dp(s1, i1, s2, i2 + 1, s3, i3 + 1, memo);
            memo[i1][i2][i3] = memo[i1][i2][i3] == null ? next : memo[i1][i2][i3] || next;
        }
        return memo[i1][i2][i3];
    }
    
    
    public boolean isInterleave(String s1, String s2, String s3) {
        Boolean[][][] memo = new Boolean[s1.length() + 1][s2.length() + 1][s3.length() + 1];
        memo[s1.length()][s2.length()][s3.length()] = true;
        return dp(s1, 0, s2, 0, s3, 0, memo);
    }
}
