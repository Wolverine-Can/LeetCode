class Solution {
    int MOD = 1000000007;
    private boolean inBound(int m, int n) {
        if (m == 3 && n == 0 || m == 3 && n ==2) {
            return false;
        }
        return m >= 0 && m < 4 && n >= 0 && n < 3;
    }
    
    private void dp(long[][] board) {
        long[][] tempBoard = new long[4][3];
        int[] dm = {1, 1, 2, 2, -1, -1, -2, -2};
        int[] dn = {2, -2, 1, -1, 2, -2, 1, -1};
        for (int m = 0; m < 3; m++) {
            for (int n = 0; n < 3; n++) {
                for (int i = 0; i < 8; i++) {
                    int nm = m + dm[i];
                    int nn = n + dn[i];
                    if (inBound(nm, nn)) {
                        tempBoard[m][n] += board[nm][nn];
                    }
                }
            }
        }
        for (int i = 0; i < 8; i++) {
            int nm = 3 + dm[i];
            int nn = 1 + dn[i];
            if (inBound(nm, nn)) {
                tempBoard[3][1] += board[nm][nn];
            }
        }
        for (int m = 0; m < 4; m++) {
            for (int n = 0; n < 3; n++) {
                board[m][n] = tempBoard[m][n] % MOD;
            }
        }
    }
    
    public int knightDialer(int N) {
        long ans = 0;
        long[][] board = new long[4][3];
        for (long[] row : board) {
            Arrays.fill(row, 1);
        }
        for (int i = 2; i <= N; i++) {
            dp(board);
        }
        for (int m = 0; m < 4; m++) {
            for (int n = 0; n < 3; n++) {
                if (m == 3 && n == 0 || m == 3 && n == 2) {
                    continue;
                }
                ans += board[m][n];
                ans %= MOD;
            }
        }
        return (int) ans % MOD;
    }
}
