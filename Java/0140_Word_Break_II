class Solution {
    private int longest = 0;
    
    private boolean canBreak(String s, Set<String> wordSet, int index, StringBuilder pre, boolean[] canBreakMemo, List<String> res) {
        if(index == s.length()) {
            res.add(pre.toString());
            return true;
        }
        if(!canBreakMemo[index]) {
            return false;
        }
        boolean returnValue = false;
        for(int i = index; i < s.length() && i - index + 1 <= longest; i++) {
            if(wordSet.contains(s.substring(index, i + 1))) {
                String word = s.substring(index, i + 1);
                int preLeng = pre.length();
                if(pre.length() != 0) {
                    pre.append(' ');
                }
                pre.append(word);
                if (canBreak(s, wordSet, i + 1, pre, canBreakMemo, res)) {
                    returnValue = true;
                }
                pre.delete(preLeng, pre.length());
            }
        }
        canBreakMemo[index] = returnValue;
        return returnValue;
    }
    
    
    public List<String> wordBreak(String s, List<String> wordDict) {
        List<String> res = new ArrayList<>();
        boolean[] canBreakMemo = new boolean[s.length()];
        Set<String> wordSet = new HashSet<>();
        Arrays.fill(canBreakMemo, true);
        for(String word : wordDict) {
            longest = Math.max(longest, word.length());
            wordSet.add(word);
        }
        canBreak(s, wordSet, 0, new StringBuilder(), canBreakMemo, res);
        return res;
    }
}
