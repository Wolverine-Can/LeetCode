/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    private List<List<Integer>> layerList(List<NestedInteger> nestedList) {
        List<List<Integer>> ans = new ArrayList<>();
        for (NestedInteger nl : nestedList) {
            if (nl.isInteger()) {
                if(ans.size() == 0) {
                    ans.add(new ArrayList<>());
                }
                ans.get(0).add(nl.getInteger());
            } else {
                List<List<Integer>> next = layerList(nl.getList());
                for (int i = 0; i < next.size(); i++) {
                    while(ans.size() < i + 2) {
                        ans.add(new ArrayList<>());
                    }
                    ans.get(i + 1).addAll(next.get(i));
                }
            }
        }
        return ans;
    }
    public int depthSumInverse(List<NestedInteger> nestedList) {
        List<List<Integer>> lst = layerList(nestedList);
        int ans = 0, layer = 1;
        for(int i = lst.size() - 1; i >= 0; i--) {
            for (int num : lst.get(i)) {
                ans += num * layer;
            }
            layer += 1;
        }
        return ans;
    }
}
