class Solution {
    private boolean isNumber(char c) {
        return c >= '0' && c <= '9';
    }
    
    public int calculate(String s) {
        Stack<Integer> numStack = new Stack<>();
        Stack<Integer> signStack = new Stack<>();
        numStack.push(0);
        signStack.push(1);
        int num = 0;
        int sign = 1;
        int index = 0;
        while(index < s.length()) {
            char c = s.charAt(index);
            if(isNumber(c)) {
                int right = index + 1;
                while(right < s.length() && isNumber(s.charAt(right))) {
                    right += 1;
                }
                num = Integer.parseInt(s.substring(index, right));
                numStack.push(numStack.pop() + num * sign);
                index = right - 1;
            } else if (c == '(') {
                numStack.push(0);
                signStack.push(sign);
                sign = 1;
            } else if (c == ')') {
                int numToAdd = numStack.pop() * signStack.pop();
                numStack.push(numStack.pop() + numToAdd);
            } else if (c == '+') {
                sign = 1;
            } else if (c == '-') {
                sign = -1;
            }
            index += 1;
        }
        return numStack.pop();
    }
}
