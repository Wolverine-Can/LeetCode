class Solution { 
    private int getNum(Stack<Character> stack) {
        int res = 0, digit = 1;
        while (!stack.isEmpty() && stack.peek() >= '0' && stack.peek() <= '9') {
            res += (stack.pop() - '0') * digit;
            digit *= 10;
        }
        return res;
    }
    
    private int getSign(Stack<Character> stack) {
        int sign = 1;
        while (!stack.isEmpty() && (stack.peek() =='+' || stack.peek() =='-')) {
            sign *= stack.pop() == '+' ? 1 : -1;
        }
        return sign;
    }
    
    public int calculate(String s) {
        Stack<Character> stack = new Stack<>();
        int index = 0, ans = 0;
        while (index < s.length()) {
            char c = s.charAt(index);
            if (c == ' ') {
                index += 1;
                continue;
            }
            if (c != ')') {
                stack.push(c);
            } else {
                int valInPar = 0;
                while (stack.peek() != '(') {
                    int num = getNum(stack);
                    int sign = getSign(stack);
                    valInPar += num * sign;
                }
                stack.pop();
                String numStr = Integer.toString(valInPar);
                for (int i = 0; i < numStr.length(); i++) {
                    stack.push(numStr.charAt(i));
                }
            }
            index += 1;
        }
        while (!stack.isEmpty()) {
            int num = getNum(stack);
            int sign = getSign(stack);
            ans += num * sign;
        }
        return ans;
    }
}
