/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private void constructParent(TreeNode root, Map<TreeNode, TreeNode> parent) {
        if (root.left != null) {
            parent.put(root.left, root);
            constructParent(root.left, parent);
        }
        if (root.right != null) {
            parent.put(root.right, root);
            constructParent(root.right, parent);
        }
    }
    
    
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        Map<TreeNode, TreeNode> parent = new HashMap<>();
        constructParent(root, parent);
        Queue<TreeNode> queue = new LinkedList<>();
        Set<TreeNode> visited = new HashSet<>();
        queue.offer(target);
        visited.add(target);
        int distance = 0;
        while (!queue.isEmpty() && distance != K) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                if (parent.containsKey(node) && !visited.contains(parent.get(node))) {
                    queue.offer(parent.get(node));
                    visited.add(parent.get(node));
                }
                if (node.left != null && !visited.contains(node.left)) {
                    queue.offer(node.left);
                    visited.add(node.left);
                }
                if (node.right != null && !visited.contains(node.right)) {
                    queue.offer(node.right);
                    visited.add(node.right);
                }
            }
            distance += 1;
        }
        List<Integer> res = new ArrayList<>();
        for (TreeNode n : queue) {
            res.add(n.val);
        }
        return res;
    }
}
