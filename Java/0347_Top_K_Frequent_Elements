// heap  O(nlog(k))
class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> frequency = new HashMap<>();
        for (Integer i : nums) {
            frequency.put(i, frequency.getOrDefault(i, 0) + 1);
        }
        PriorityQueue<Integer> heap = new PriorityQueue<>((a, b) -> {
            return frequency.get(a) - frequency.get(b);
        });
        
        for (Integer i : frequency.keySet()) {
            heap.offer(i);
            if (heap.size() > k){
                heap.poll();
            }
        }
        int[] ans = new int[k];
        for(int i = 0; i < k; i++) {
            ans[i] = heap.poll();
        }
        return ans;
    }
}
