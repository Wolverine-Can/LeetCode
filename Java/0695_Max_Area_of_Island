class UnionFind {
    int[] parent;
    int maxSetSize = 0;;
    UnionFind(int n) {
        parent = new int[n];
        Arrays.fill(parent, -1);
        maxSetSize = 0;
    }
    
    public int find(int x) {
        int head = x, px;
        while (parent[head] >= 0) {
            head = parent[head];
        }
        while (x != head) {
            px = parent[x];
            parent[x] = head;
            x = px;
        }
        return head;
    }
    
    public void union(int x, int y) {
        int hx = find(x), hy = find(y);
        if(hx != hy) {
            parent[hx] = parent[hx] + parent[hy];
            parent[hy] = hx;
            maxSetSize = Math.max(maxSetSize, -parent[hx]);
        }
    }
}

class Solution {
    private boolean inBound(int[][] grid, int m, int n) {
        int row = grid.length, col = grid[0].length;
        return m >= 0 && m < row && n >= 0 && n < col;
    }
    
    public int maxAreaOfIsland(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int ans = 0;
        int row = grid.length, col = grid[0].length;
        UnionFind UF = new UnionFind(row * col);
        int[] dm = {0, -1};
        int[] dn = {-1, 0};
        for (int m = 0; m < row; m++) {
            for (int n = 0; n < col; n++) {
                if (grid[m][n] == 1) {
                    ans = Math.max(ans, 1);
                    for (int i = 0; i < 2; i++) {
                        int nm = m + dm[i];
                        int nn = n + dn[i];
                        if (inBound(grid, nm, nn) && grid[nm][nn] == 1) {
                            UF.union(m * col + n, nm * col +nn);
                        }
                    }
                }
            }
        }
        return Math.max(UF.maxSetSize, ans);
    }
}
