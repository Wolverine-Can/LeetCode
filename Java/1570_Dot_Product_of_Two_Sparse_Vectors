class SparseVector {
    Map<Integer, Integer> map;
    
    SparseVector(int[] nums) {
        map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if(nums[i] != 0) {
                map.put(i, nums[i]);
            }
        }
    }
    
	// Return the dotProduct of two sparse vectors
    public int dotProduct(SparseVector vec) {
        Map<Integer, Integer> map2 = vec.map;
        int ans = 0;
        if (map.keySet().size() < map2.keySet().size()) {
            for (int i : map.keySet()) {
                if (map2.containsKey(i)) {
                    ans += map.get(i) * map2.get(i);
                }
            }
        } else {
            for (int i : map2.keySet()) {
                if (map.containsKey(i)) {
                    ans += map.get(i) * map2.get(i);
                }
            }
        }
        return ans;
    }
}

// Your SparseVector object will be instantiated and called as such:
// SparseVector v1 = new SparseVector(nums1);
// SparseVector v2 = new SparseVector(nums2);
// int ans = v1.dotProduct(v2);
